[
    {
        "id": "6a5d113e75ed72e1",
        "type": "tab",
        "label": "Customer Support Agent",
        "disabled": false,
        "info": "Customer support agent integration with Cloudflare AutoRAG",
        "env": []
    },
    {
        "id": "c072fd14f56e3d17",
        "type": "http in",
        "z": "6a5d113e75ed72e1",
        "name": "Customer Support Endpoint",
        "url": "/customer-support",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "ec0c2d0b20a1c6e9"
            ]
        ]
    },
    {
        "id": "ec0c2d0b20a1c6e9",
        "type": "function",
        "z": "6a5d113e75ed72e1",
        "name": "Parse Message",
        "func": "msg.original = msg.payload;\nif (typeof msg.payload === 'string') {\n    try {\n        msg.payload = JSON.parse(msg.payload);\n    } catch(e) {\n        msg.payload = { message: msg.payload };\n    }\n}\n\n// Ensure we have a message field\nif (!msg.payload.message && msg.payload.text) {\n    msg.payload.message = msg.payload.text;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "ede56b6a1d3bb94c"
            ]
        ]
    },
    {
        "id": "ede56b6a1d3bb94c",
        "type": "function",
        "z": "6a5d113e75ed72e1",
        "name": "Prepare AutoRAG Request",
        "func": "// Store configuration in flow context for reuse\nif (!flow.get('autorag_config')) {\n    flow.set('autorag_config', {\n        account_id: 'YOUR_CLOUDFLARE_ACCOUNT_ID', // Replace with your actual Account ID\n        autorag_name: 'YOUR_AUTORAG_NAME', // Replace with your AutoRAG name\n        api_token: 'YOUR_API_TOKEN' // Replace with your API token\n    });\n}\n\nconst config = flow.get('autorag_config');\n\n// Prepare the request to Cloudflare AutoRAG\nmsg.url = `https://api.cloudflare.com/client/v4/accounts/${config.account_id}/autorag/rags/${config.autorag_name}/ai-search`;\n\nmsg.payload = {\n    query: msg.payload.message,\n    model: '@cf/meta/llama-3.3-70b-instruct-sd', // You can change this to your preferred model\n    rewrite_query: true,\n    max_num_results: 5,\n    ranking_options: {\n        score_threshold: 0.6\n    },\n    stream: false\n};\n\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${config.api_token}`\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "ba4e17b99fb02f5e"
            ]
        ]
    },
    {
        "id": "ba4e17b99fb02f5e",
        "type": "http request",
        "z": "6a5d113e75ed72e1",
        "name": "AutoRAG Request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": {},
        "x": 840,
        "y": 120,
        "wires": [
            [
                "dcc1a5da8b3e6dfd",
                "a0c4a6d4cbfe2ead"
            ]
        ]
    },
    {
        "id": "dcc1a5da8b3e6dfd",
        "type": "function",
        "z": "6a5d113e75ed72e1",
        "name": "Format Response",
        "func": "// Check if the response was successful\nif (msg.statusCode === 200 && msg.payload.success) {\n    const autoragResponse = msg.payload.result;\n    \n    // Create a formatted response\n    msg.payload = {\n        status: \"success\",\n        response: autoragResponse.response,\n        timestamp: new Date().toISOString(),\n        inquiryId: Math.random().toString(36).substring(2, 12),\n        sources: autoragResponse.data.map(doc => ({\n            filename: doc.filename,\n            score: doc.score\n        }))\n    };\n    \n    // Store in context for the dashboard\n    const inquiries = flow.get('inquiries') || [];\n    inquiries.push({\n        timestamp: msg.payload.timestamp,\n        inquiry: msg.original.message || msg.original,\n        response: msg.payload.response,\n        id: msg.payload.inquiryId,\n        sources: msg.payload.sources\n    });\n    \n    // Keep only the last 50 inquiries\n    if (inquiries.length > 50) {\n        inquiries.shift();\n    }\n    flow.set('inquiries', inquiries);\n} else {\n    msg.payload = {\n        status: \"error\",\n        error: \"Failed to get response from Cloudflare AutoRAG\",\n        details: msg.payload\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": [
            [
                "8f9f5c4c32bbdc75"
            ]
        ]
    },
    {
        "id": "a0c4a6d4cbfe2ead",
        "type": "function",
        "z": "6a5d113e75ed72e1",
        "name": "Detect Complex Issues",
        "func": "// Check if AutoRAG response indicates a complex issue\n// This will depend on your specific criteria\n\nlet isComplex = false;\nlet hasLowConfidence = false;\n\n// If response was successful\nif (msg.statusCode === 200 && msg.payload.success) {\n    const autoragResponse = msg.payload.result;\n    \n    // Check if confidence scores are too low\n    const lowConfidenceThreshold = 0.7;\n    hasLowConfidence = autoragResponse.data.every(doc => doc.score < lowConfidenceThreshold);\n    \n    // Check if response is too short or contains uncertainty phrases\n    const responseText = autoragResponse.response || '';\n    const uncertaintyPhrases = [\n        \"I'm not sure\", \n        \"I don't know\", \n        \"cannot determine\",\n        \"insufficient information\",\n        \"please contact support\"\n    ];\n    \n    const containsUncertainty = uncertaintyPhrases.some(phrase => \n        responseText.toLowerCase().includes(phrase.toLowerCase())\n    );\n    \n    isComplex = hasLowConfidence || containsUncertainty;\n}\n\n// Set complex flag and forward original message\nmsg.complex = isComplex;\n\n// Add reason for easier debugging\nif (isComplex) {\n    msg.complexReason = hasLowConfidence ? \"Low confidence scores\" : \"Contains uncertainty phrases\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "01d56ece20c13c5d"
            ]
        ]
    },
    {
        "id": "01d56ece20c13c5d",
        "type": "switch",
        "z": "6a5d113e75ed72e1",
        "name": "Route Complex Issues",
        "property": "complex",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 120,
        "wires": [
            [
                "3d3ba6d8d69df0ef"
            ],
            [
                "a0ddd69e2a0889b7"
            ]
        ]
    },
    {
        "id": "3d3ba6d8d69df0ef",
        "type": "e-mail",
        "z": "6a5d113e75ed72e1",
        "server": "smtp.example.com",
        "port": "587",
        "secure": true,
        "tls": true,
        "name": "Email Notification",
        "dname": "Email Support Team",
        "x": 1290,
        "y": 60,
        "wires": []
    },
    {
        "id": "a0ddd69e2a0889b7",
        "type": "function",
        "z": "6a5d113e75ed72e1",
        "name": "Passthrough",
        "func": "// Just passing through for non-complex issues\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8f9f5c4c32bbdc75",
        "type": "http response",
        "z": "6a5d113e75ed72e1",
        "name": "Send Response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1050,
        "y": 200,
        "wires": []
    },
    {
        "id": "32e09b7a7ba0f2c5",
        "type": "ui_template",
        "z": "6a5d113e75ed72e1",
        "group": "58b6ba16df8fb4de",
        "name": "Customer Support Dashboard",
        "order": 1,
        "width": "24",
        "height": "12",
        "format": "<div ng-init=\"inquiries = $flow.get('inquiries') || []\">\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h3 class=\"panel-title\">Recent Customer Inquiries</h3>\n    </div>\n    <div class=\"panel-body\">\n      <table class=\"table table-striped\">\n        <tr>\n          <th>Time</th>\n          <th>Inquiry</th>\n          <th>Response</th>\n          <th>Sources</th>\n        </tr>\n        <tr ng-repeat=\"item in inquiries | orderBy:'-timestamp'\" class=\"inquiry-row\">\n          <td>{{item.timestamp | date:'short'}}</td>\n          <td>{{item.inquiry}}</td>\n          <td>{{item.response}}</td>\n          <td>\n            <div ng-repeat=\"source in item.sources\">\n              {{source.filename}} ({{source.score | number:2}})\n            </div>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "58b6ba16df8fb4de",
        "type": "ui_group",
        "name": "Recent Inquiries",
        "tab": "0b19cd0fe1e4a233",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0b19cd0fe1e4a233",
        "type": "ui_tab",
        "name": "Customer Support",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
